-- ------------------------------------------------------------
-- QUERY 1: Total Revenue by Product
-- ------------------------------------------------------------
-- This query calculates total revenue for each product by multiplying
-- quantity sold with product price. It joins the sales and products table,
-- groups by product details, and orders by highest revenue.
-- Useful for identifying top-selling products.

SELECT 
    p.product_id,
    p.product_name,
    p.category,
    SUM(s.quantity_sold * p.price) AS total_revenue
FROM 
    retail_clean.sales s
JOIN 
    retail_clean.products p ON s.product_id = p.product_id
GROUP BY 
    p.product_id, p.product_name, p.category
ORDER BY 
    total_revenue DESC;


-- ------------------------------------------------------------
-- QUERY 2: Total Revenue by Branch
-- ------------------------------------------------------------
-- This query calculates total revenue generated by each branch.
-- It joins sales, products, and branches tables, then aggregates
-- revenue per branch. Useful to identify high-performing regions.

SELECT 
    b.branch_id,
    b.branch_name,
    b.region,
    SUM(s.quantity_sold * p.price) AS total_revenue
FROM 
    retail_clean.sales s
JOIN 
    retail_clean.products p ON s.product_id = p.product_id
JOIN 
    retail_clean.branches b ON s.branch_id = b.branch_id
GROUP BY 
    b.branch_id, b.branch_name, b.region
ORDER BY 
    total_revenue DESC;


-- ------------------------------------------------------------
-- QUERY 3: Top 5 Best-Selling Products (by Quantity Sold)
-- ------------------------------------------------------------
-- This query identifies the top 5 products with the highest total quantity sold.
-- It uses sales and product tables, groups by product, and sorts by volume sold.
-- Helps identify customer demand patterns.

SELECT 
    p.product_id,
    p.product_name,
    SUM(s.quantity_sold) AS total_quantity_sold
FROM 
    retail_clean.sales s
JOIN 
    retail_clean.products p ON s.product_id = p.product_id
GROUP BY 
    p.product_id, p.product_name
ORDER BY 
    total_quantity_sold DESC
LIMIT 5;


-- ------------------------------------------------------------
-- QUERY 4: Monthly Sales Trend (Last 2 Months)
-- ------------------------------------------------------------
-- This query shows how much was sold per month by aggregating total quantity sold.
-- It extracts year and month from the sale_date column and groups by them.
-- Useful for tracking trends and seasonality.

SELECT 
    TO_CHAR(s.sale_date, 'YYYY-MM') AS sale_month,
    SUM(s.quantity_sold) AS total_quantity_sold
FROM 
    retail_clean.sales s
WHERE 
    s.sale_date >= CURRENT_DATE - INTERVAL '60 days'
GROUP BY 
    TO_CHAR(s.sale_date, 'YYYY-MM')
ORDER BY 
    sale_month;

-- ------------------------------------------------------------
-- QUERY 5: Average Quantity Sold per Transaction
-- ------------------------------------------------------------
-- Calculates the average quantity sold per sales transaction.
-- This gives an idea of how much customers are typically buying at once.

SELECT 
    ROUND(AVG(quantity_sold), 2) AS avg_quantity_per_transaction
FROM 
    retail_clean.sales;


-- ------------------------------------------------------------
-- QUERY 6: Products with Low Stock in Any Branch
-- ------------------------------------------------------------
-- Identifies products where the stock is below a threshold (e.g. < 20 units)
-- at any branch location. Useful for proactive restocking decisions.

SELECT 
    i.product_id,
    p.product_name,
    i.branch_id,
    b.branch_name,
    i.stock_on_hand
FROM 
    retail_clean.inventory i
JOIN 
    retail_clean.products p ON i.product_id = p.product_id
JOIN 
    retail_clean.branches b ON i.branch_id = b.branch_id
WHERE 
    i.stock_on_hand < 20
ORDER BY 
    i.stock_on_hand ASC;


-- ------------------------------------------------------------
-- QUERY 7: Branches with Highest Total Inventory
-- ------------------------------------------------------------
-- Calculates total stock held at each branch by summing all stock_on_hand.
-- Helps identify which branches are overstocked or well-stocked.

SELECT 
    b.branch_id,
    b.branch_name,
    b.region,
    SUM(i.stock_on_hand) AS total_stock
FROM 
    retail_clean.inventory i
JOIN 
    retail_clean.branches b ON i.branch_id = b.branch_id
GROUP BY 
    b.branch_id, b.branch_name, b.region
ORDER BY 
    total_stock DESC;


-- ------------------------------------------------------------
-- QUERY 8: Products Out of Stock in 3 or More Branches
-- ------------------------------------------------------------
-- Identifies products that have 0 stock in 3 or more branches.
-- Useful for flagging products at high risk of complete unavailability.

SELECT 
    i.product_id,
    p.product_name,
    COUNT(*) AS out_of_stock_branches
FROM 
    retail_clean.inventory i
JOIN 
    retail_clean.products p ON i.product_id = p.product_id
WHERE 
    i.stock_on_hand = 0
GROUP BY 
    i.product_id, p.product_name
HAVING 
    COUNT(*) >= 3
ORDER BY 
    out_of_stock_branches DESC;


-- ------------------------------------------------------------
-- QUERY 9: Average Delivery Delay by Supplier
-- ------------------------------------------------------------
-- Calculates the average number of days each supplier is early or late.
-- Negative value = early delivery, Positive = delay.

SELECT 
    s.supplier_id,
    s.supplier_name,
    ROUND(AVG(d.actual_date - d.expected_date), 2) AS avg_delivery_delay_days
FROM 
    retail_clean.deliveries d
JOIN 
    retail_clean.suppliers s ON d.supplier_id = s.supplier_id
GROUP BY 
    s.supplier_id, s.supplier_name
ORDER BY 
    avg_delivery_delay_days DESC;


-- ------------------------------------------------------------
-- QUERY 10: Products Frequently Delayed
-- ------------------------------------------------------------
-- Lists products that were delivered late (actual > expected)
-- more than 5 times. Helps identify recurring supply issues.

SELECT 
    d.product_id,
    p.product_name,
    COUNT(*) AS delayed_deliveries
FROM 
    retail_clean.deliveries d
JOIN 
    retail_clean.products p ON d.product_id = p.product_id
WHERE 
    d.actual_date > d.expected_date
GROUP BY 
    d.product_id, p.product_name
HAVING 
    COUNT(*) > 5
ORDER BY 
    delayed_deliveries DESC;


-- ------------------------------------------------------------
-- QUERY 11: Total Quantity Delivered by Supplier
-- ------------------------------------------------------------
-- Sums up the total quantity of products delivered by each supplier.
-- Useful for evaluating which suppliers handle the highest volume.

SELECT 
    s.supplier_id,
    s.supplier_name,
    SUM(d.quantity_delivered) AS total_quantity_delivered
FROM 
    retail_clean.deliveries d
JOIN 
    retail_clean.suppliers s ON d.supplier_id = s.supplier_id
GROUP BY 
    s.supplier_id, s.supplier_name
ORDER BY 
    total_quantity_delivered DESC;

